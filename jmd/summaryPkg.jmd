---
title: juliaでよくつかうパッケージまとめ
author: "@takuizum"
date: 5th Dec 2019
---

# juliaのパッケージ


# パッケージの使い方

## パッケージの追加方法

コードを評価する場合はこちら。
`using Pkg;Pkg.add("PkgName")`

REPLに直接打ち込むのであれば，PkgREPLが便利です。

1. REPLに`]`を打ち込んでPkgREPLに移動
2. `add hoge`

パッケージ名のあとに`@数字`を入力するとバージョンを指定できます。`#`でブランチ名やコミットの数字（ハッシュ？よくわからん～）を指定することもできます。

----

## パッケージの使い方

julia REPLで`using hoge`とすれば，必要に応じてprecompileが走ってすぐ（物によっては1分くらいかかる）使えるようになります。

```julia
using Plots
y = randn(100)
plot(y)
```

複数のパッケージで関数の名前が衝突して，指示が曖昧になるのを避けるには，明示的に`hoge.fuga()`と実行すればよいです。

`WARNING: using Gadfly.plot in module Main conflicts with an existing identifier.`

```julia
using Gadfly, DataFrames
Gadfly.plot(DataFrame(x = 1:100, y = y), x = :x, y = :y , Geom.line)
```

`import hoge.fuga`とすればhogeパッケージのhuga関数だけをインポートできます。

```julia
import Statistics.std
std([1:1:10;])
var() # 同じStatisticsにあっても，こちらは使えない。
```

----

## よく使うパッケージ一覧

いち心理学系ユーザーが個人的によく使う程度なので，範囲は十分ではないです。
野良ではない公式のパッケージは[](https://pkg.julialang.org/docs/)で調べることができます。

例えばおなじベイズ推論を扱うパッケージでも，Turingは公式にありますがGenはgitから引っ張ってくる必要がある野良パッケージに当たります。

---

### Statistics

記述統計用の関数が揃っています。平均，中央値，quantile，標準偏差，分散，相関，共分散が含まれます。

Rと同じで分散・標準偏差は，デフォルトだと不偏のほうを求めます。

```julia
using Statistics
Statistics.mean([1 2 3])
Statistics.std(1:10, corrected = false) # デフォルトだと不偏標準偏差を計算する。
[Statistics.var(1:10, corrected = true)
 Statistics.var(1:10, corrected = false)]
```

**NewFeature**
julia1.3から`mean`関数に，任意の関数`f`を適用してから平均をとる機能が追加されました（誰得？）

```julia
mean(√,[1 2 3;4 5 6])
```

----

### StatsFuns

ロジスティック関数`logistic(x::Real)`やソフトマックス関数`sodtma(x::Array)`などが含まれています。心理系だとよくお世話になる関数なのでたまに使います。

そのほかオーバーフロー回避で使われる`logsumexp(x)`もあります。

```julia
using StatsFuns
Gadfly.plot(DataFrame(x = -10:.1:10, y = logistic.(-10:.1:10)), x = :x, y = :y , Geom.line)
```

----

### StatsBase

積率や度数，共分散などを計算することができるパッケージです。

```julia
using StatsBase
# 任意のレンジで度数をカウント
counts(sample([1:1:100;], 100), 1:100)
```

おすすめは`Plots`とのあわせ技で，かんたんに2変量のヒストグラムをかける`fit(Histogram, (X, Y)) |> Plots.plot`です

---

### SpecialFunstions

ベータ分布系のモデルを微分したりするとお世話になる，digammaやtrigammaなどの関数を扱うパッケージです。それ以外の関数は私にはよくわかりません。

$\ln{Γ}$を計算したいときに`lgamma`よりも`logabsgamma`を使うとより高速に計算できます。ちなみに`lgamma`を使うと以下のような警告が出ます。
`"`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead."`

でも`loggamma`を使ったほうがより速いみたいです。

```julia
using SpecialFunctions
log(1);gamma(1);lgamma(1);loggamma(1);logabsgamma(1);# precompile
@time [log(gamma(x)) for x in 0.001:0.001:10]
@time [lgamma(x) for x in 0.001:0.001:10]
@time [loggamma(x) for x in 0.001:0.001:10]
@time [(logabsgamma(x))[1] for x in 0.001:0.001:10];
```

---

### Distributions

様々な確率分布を扱うパッケージです。統計モデルを扱う上では必須です。
乱数を発生させたいときは`Random`も一緒にインポートしておき，`rand`を使います。確率密度は`pdf.`です（.をつけることが推奨される）。

```julia
using Distributions
using Random

rand(Beta(1, 3), 1000) |> x -> histogram(x, normalize = true)
plot!(0:.01:1, pdf.(Beta(1, 3), 0:.01:1))

```

他にもサンプルデータに確率分布をフィットさせて，パラメタを最尤推定することも簡単にできます（任意の制約でMAP推定もできるみたいです）。

```julia
d = rand(Beta(1, 3), 1000)
fit(Beta, d)

# optimで最尤推定
using Optim
fn(x, par) = -sum(logpdf.(Beta(par[1], par[2]), x))
opt = optimize(x -> fn(d, x), [1.0, 1.0], Newton())
opt.minimizer
```

----

### Gadfly

R言語にあるggplot2ライクなプロットを書くことができます。

----

### StatsPlots

[LINK](https://github.com/JuliaPlots/StatsPlots.jl)

統計分析用のプロットパッケージです。

周辺分布をかんたんに書けたりします。他にもインタラクティブなプロットもできるみたいです。

```julia
using StatsPlots, Distributions
StatsPlots.marginalhist(sort(rand(Normal(), 1000)), sort(rand(Normal(), 1000)))
```

データフレーム操作パッケージ`Query`と連携することで，データをざっと要約することもできます。

```julia
using Query, RDatasets
# データのざっとした要約
iris = RDatasets.dataset("datasets", "iris")
@df iris corrplot([:SepalLength :SepalWidth :PetalLength :PetalWidth], grid = false)
```

----

### Turing

[LINK](https://turing.ml/dev/)

先日のjulia Tokyo 10でも紹介があった，juliaによるjuliaのためのjuliaなPPLです。特徴は生成モデルの記述によるかんたんな確率モデルの表現だけで，比較的複雑な（階層的な）モデルを表現できるところです。
